name: release

on:
  release:
    types: [published]

jobs:
  build-and-publish:
    name: Build and publish library to NuGet
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@master

      - name: Extract version
        id: extract-version
        run: |
          version=$(cat ./src/Dodo.HttpClient.ResiliencePolicies/Dodo.HttpClient.ResiliencePolicies.csproj | grep "<VersionPrefix>" | sed -e "s/ *<\/*VersionPrefix>//g")
          echo "Package version: $version"
          if [ -z "${version// }" ]; then exit 1; fi
          echo "::set-output name=package_version::$version"

      - name: Extract package suffix from tag
        id: extract-version-suffix
        run: |
          ref=${{ github.ref }}
          prerelease=${{ github.event.release.prerelease }}
          version=${{ steps.extract-version.outputs.package_version }}
          shopt -s extglob
          suffix=${ref##*/v"${version}"?(-)}
          echo "Version suffix: $suffix"
          if [ -z "${suffix// }" ] && [ $prerelease == "true" ]; then exit 1; fi
          echo "::set-output name=version_suffix::$suffix"

      - name: Setup dotnet
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: "3.1.100"

      - name: Build and publish library to NuGet
        run: |
          dotnet build --configuration Release ./src/Dodo.HttpClient.ResiliencePolicies/Dodo.HttpClient.ResiliencePolicies.csproj
          dotnet test --configuration Release ./src/Dodo.HttpClient.ResiliencePolicies.Tests/Dodo.HttpClient.ResiliencePolicies.Tests.csproj
          dotnet pack --no-restore --no-build --configuration Release --version-suffix "${{ steps.extract-version-suffix.outputs.version_suffix }}" --output out/ ./src/Dodo.HttpClient.ResiliencePolicies/Dodo.HttpClient.ResiliencePolicies.csproj
          echo "dotnet publish ..."
      - uses: actions/upload-artifact@master
        with:
          name: NuGet package
          path: out/


  upload-release-assets:
    name: Upload release assets
    runs-on: ubuntu-latest

    needs: build-and-publish

    steps:
      - uses: actions/download-artifact@master
        with:
          name: NuGet package
          path: out

      - name: Get package
        id: get-package
        run: |
          echo "::set-output name=package::$(ls out/)"

      - name: Upload release assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./out/${{ steps.get-package.outputs.package }}
          asset_name: ${{ steps.get-package.outputs.package }}
          asset_content_type: application/zip
