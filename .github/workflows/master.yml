name: master

on:
  push:
    branches:
      - master

jobs:
  build-and-test:
    name: Build and test library
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@master

      - name: Setup dotnet
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: "3.1.100"

      - name: Build and test library
        run: |
          dotnet build --configuration Release ./src/Dodo.HttpClientExtensions/Dodo.HttpClientExtensions.csproj
          dotnet test --configuration Release ./src/Dodo.HttpClientExtensions.Tests/Dodo.HttpClientExtensions.Tests.csproj


  release:
    name: Create release
    runs-on: ubuntu-latest

    needs: build-and-test

    steps:
      - uses: actions/checkout@v1

      - name: Extract version
        id: extract-version
        run: |
          version=$(cat ./src/Dodo.HttpClientExtensions/Dodo.HttpClientExtensions.csproj | grep "<VersionPrefix>" | sed -e "s/ *<\/*VersionPrefix>//g")
          echo "Package version: $version"
          if [ -z "${version// }" ]; then exit 1; fi
          echo "::set-output name=package_version::$version"

      - name: Extract latest commit message
        id: latest-commit
        run: |
          echo "${{ github.ref }}"
          echo "::set-output name=message::$(git log --format=%B -n 1 ${{ github.event.after }})"

      - uses: jwalton/gh-find-current-pr@v1
        id: find-pr
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Create release
        id: create_release
        uses: actions/create-release@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.extract-version.outputs.package_version }}
          release_name: Release v${{ steps.extract-version.outputs.package_version }}
          body: ${{ steps.find-pr.outputs.body || steps.latest-commit.outputs.message }}
          draft: true
          prerelease: false
